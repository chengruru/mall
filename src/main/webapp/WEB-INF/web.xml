<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         id="WebApp_ID" version="2.5">

    <display-name>Archetype Created Web Application</display-name>
    <!--
    characterEncodingFilter字符编码过滤器， 用于解决从页面传来的字符串的编码问题
    过滤器就是针对于每次浏览器请求进行过滤的，然后再其之上添加了父类没有的功能即处理字符编码。
    -->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <!--
            是否强制设置request的编码为encoding，默认false，不建议更改，设置为true则强制覆盖之前的编码格式
            -->
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <!--这里不能留空或者直接写 ' /* ' ，否则不起作用
        /* ：表示拦截所有请求，经过CharacterEncodingFilter进行处理
    -->
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--在RequestContext（请求上下文对象）创建和销毁的时候进行某些操作-->
    <listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>

    <!--
        在启动Tomcat容器的时候，该类的作用就是自动装载ApplicationContext的配置信息，
        如果没有设置contextConfigLocation的初始参数,则会使用默认参数WEB-INF路径下的application.xml文件。
        如果需要自定义读取多个配置文件或者修改默认路径，则可以在web.xml
    -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath:applicationContext.xml
        </param-value>
    </context-param>

    <!--spring mvc 的一个配置-->
    <servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--在启动容器的时候，就初始化该配置文件-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <!--拦截所有的 .do请求-->
    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>

</web-app>

